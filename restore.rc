#!/bin/bash -e
args="$*"
function except() { echo "Error: $0 $args" ;  }
trap except ERR

cd `dirname $0`

# this script relies on the following environment variables
# -) N_YEARS number of years after last played date that we keep videos in KMC
# -) DOIT - indicates whether to run actions in DRYRUN mode or for 'real'
#    prod - set to true
#    test - don't set or set to something other than true
#
# in test mode restore is donw only in DRYRUN mode

if [ -z ${DOIT+x} ]; then DOIT="false"; fi
if [ $DOIT = "true" ]
then
  max_entries=-1
  doit_restore='--restore'
else
  max_entries=1
  doit_restore=''
fi

tag=restore-pending
log=INFO
log_dir=$(date +log/%Y/%m/%d)
mkdir -p $log_dir
tsv=$(date +$log_dir/$tag-%H:%M:%S)
tmp=/tmp/restore-$$.tsv

# ----------------------------------------------------------------------------------------
# restore videos played or created within last 3 years -
# the latter should not ever be the case but we might as well cleanup if errors occur
#
echo "restore deleted videos PLAYED within $N_YEARS YEARS"
python src/kaltura_aws.py --loglevel $log restore_from_s3 --tag flavors_deleted --played_within $N_YEARS --max_entries $max_entries $doit_restore

echo "restore deleted videos CREATED within $N_YEARS YEARS"
python src/kaltura_aws.py --loglevel $log restore_from_s3  --tag flavors_deleted --created_within $N_YEARS --max_entries $max_entries $doit_restore
echo ""

# ---------------------------------------------------------
# print counts of videos that should but have not yet been restored 
#
# should print a count near zero  - we may be waiting for videos to come out of glacier
# should print a count of 0
echo "#-------------------------------"
echo "#videos that need to be restored"
echo "#-------------------------------"
echo "#videos DELETED/REPLACED and PLAYED  within $N_YEARS years"
python src/kaltura_aws.py count --tag flavors_deleted --played_within $N_YEARS
echo "#videos DELETED/REPLACED and CREATED within $N_YEARS years"
python src/kaltura_aws.py  count --tag flavors_deleted --created_within $N_YEARS
echo ""

# ----------------------------------------------------------------------------------------
# generate  health  report of entries that still need to be restored
python src/kaltura_aws.py  health --tag flavors_deleted --played_within $N_YEARS > $tmp
python src/kaltura_aws.py  health --tag flavors_deleted --created_within $N_YEARS >> $tmp
# combine and clean up 
echo "#Entries created or played within last $N_YEARS years that have a flavors-deleted tag" > $tsv.tsv
fgrep entry_id  $tmp | head -n 1 >> $tsv.tsv
sort -u $tmp >> $tsv.tsv

# ----------------------------------------------------------------------------------------
# copy report to s3
if [ $doit ]
then
  aws s3 cp $tsv.tsv  s3://$AWS_BUCKET/$tsv.tsv
else
  echo $tsv.tsv
fi
